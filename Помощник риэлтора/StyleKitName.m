//
//  StyleKitName.m
//  Realt assist
//
//  Created by Michael Kozlyukov on 27.03.17.
//  Copyright Â© 2017 Chebahatt. All rights reserved.
//
//  Generated by PaintCode
//  http://www.paintcodeapp.com
//

#import "StyleKitName.h"


@implementation StyleKitName

#pragma mark Cache

static UIColor* _gradientColor = nil;
static UIColor* _gradientColor2 = nil;
static UIColor* _gradientColor3 = nil;
static UIColor* _gradientColor4 = nil;
static UIColor* _gradientColor5 = nil;
static UIColor* _gradientColor6 = nil;

static CGGradientRef _linearGradient1 = NULL;
static CGGradientRef _linearGradient = NULL;
static CGGradientRef _linearGradient2 = NULL;

static UIImage* _imageOfGradient2 = nil;
static UIImage* _imageOfGradient3 = nil;

#pragma mark Initialization

+ (void)initialize
{
    // Colors Initialization
    _gradientColor = [UIColor colorWithRed: 0.122 green: 0.11 blue: 0.173 alpha: 1];
    _gradientColor2 = [UIColor colorWithRed: 0.573 green: 0.553 blue: 0.671 alpha: 1];
    _gradientColor3 = [UIColor colorWithRed: 0.263 green: 0.808 blue: 0.635 alpha: 1];
    _gradientColor4 = [UIColor colorWithRed: 0.094 green: 0.353 blue: 0.616 alpha: 1];
    _gradientColor5 = [UIColor colorWithRed: 0.227 green: 0.482 blue: 0.835 alpha: 1];
    _gradientColor6 = [UIColor colorWithRed: 0 green: 0.824 blue: 1 alpha: 1];

    // Gradients Initialization
    CGFloat linearGradient1Locations[] = {0, 1};
    _linearGradient1 = CGGradientCreateWithColors(NULL, (__bridge CFArrayRef)@[(id)StyleKitName.gradientColor.CGColor, (id)StyleKitName.gradientColor2.CGColor], linearGradient1Locations);
    CGFloat linearGradientLocations[] = {0, 1};
    _linearGradient = CGGradientCreateWithColors(NULL, (__bridge CFArrayRef)@[(id)StyleKitName.gradientColor3.CGColor, (id)StyleKitName.gradientColor4.CGColor], linearGradientLocations);
    CGFloat linearGradient2Locations[] = {0, 1};
    _linearGradient2 = CGGradientCreateWithColors(NULL, (__bridge CFArrayRef)@[(id)StyleKitName.gradientColor5.CGColor, (id)StyleKitName.gradientColor6.CGColor], linearGradient2Locations);

}

#pragma mark Colors

+ (UIColor*)gradientColor { return _gradientColor; }
+ (UIColor*)gradientColor2 { return _gradientColor2; }
+ (UIColor*)gradientColor3 { return _gradientColor3; }
+ (UIColor*)gradientColor4 { return _gradientColor4; }
+ (UIColor*)gradientColor5 { return _gradientColor5; }
+ (UIColor*)gradientColor6 { return _gradientColor6; }

#pragma mark Gradients

+ (CGGradientRef)linearGradient1 { return _linearGradient1; }
+ (CGGradientRef)linearGradient { return _linearGradient; }
+ (CGGradientRef)linearGradient2 { return _linearGradient2; }

#pragma mark Drawing Methods

+ (void)drawGradient1
{
    [StyleKitName drawGradient1WithFrame: CGRectMake(0, 0, 100, 100) resizing: StyleKitNameResizingBehaviorStretch];
}

+ (void)drawGradient1WithFrame: (CGRect)targetFrame resizing: (StyleKitNameResizingBehavior)resizing
{
    //// General Declarations
    CGContextRef context = UIGraphicsGetCurrentContext();
    
    //// Resize to Target Frame
    CGContextSaveGState(context);
    CGRect resizedFrame = StyleKitNameResizingBehaviorApply(resizing, CGRectMake(0, 0, 100, 100), targetFrame);
    CGContextTranslateCTM(context, resizedFrame.origin.x, resizedFrame.origin.y);
    CGContextScaleCTM(context, resizedFrame.size.width / 100, resizedFrame.size.height / 100);


    //// Page-1
    {
        //// Gradients
        {
            //// gradient-#01 Drawing
            UIBezierPath* gradient01Path = [UIBezierPath bezierPathWithRect: CGRectMake(0, 0, 100, 100)];
            CGContextSaveGState(context);
            [gradient01Path addClip];
            CGContextDrawLinearGradient(context, StyleKitName.linearGradient1,
                CGPointMake(100, 0),
                CGPointMake(0, 100),
                kCGGradientDrawsBeforeStartLocation | kCGGradientDrawsAfterEndLocation);
            CGContextRestoreGState(context);
        }
    }
    
    CGContextRestoreGState(context);

}

+ (void)drawGradient2
{
    [StyleKitName drawGradient2WithFrame: CGRectMake(0, 0, 100, 100) resizing: StyleKitNameResizingBehaviorStretch];
}

+ (void)drawGradient2WithFrame: (CGRect)targetFrame resizing: (StyleKitNameResizingBehavior)resizing
{
    //// General Declarations
    CGContextRef context = UIGraphicsGetCurrentContext();
    
    //// Resize to Target Frame
    CGContextSaveGState(context);
    CGRect resizedFrame = StyleKitNameResizingBehaviorApply(resizing, CGRectMake(0, 0, 100, 100), targetFrame);
    CGContextTranslateCTM(context, resizedFrame.origin.x, resizedFrame.origin.y);
    CGContextScaleCTM(context, resizedFrame.size.width / 100, resizedFrame.size.height / 100);


    //// Page-1
    {
        //// Gradients
        {
            //// gradient-#02 Drawing
            UIBezierPath* gradient02Path = [UIBezierPath bezierPath];
            [gradient02Path moveToPoint: CGPointMake(-0.03, 0)];
            [gradient02Path addLineToPoint: CGPointMake(99.97, 0)];
            [gradient02Path addLineToPoint: CGPointMake(99.97, 100)];
            [gradient02Path addLineToPoint: CGPointMake(0.28, 100)];
            [gradient02Path addLineToPoint: CGPointMake(-0.03, 0)];
            [gradient02Path closePath];
            gradient02Path.usesEvenOddFillRule = YES;
            CGContextSaveGState(context);
            [gradient02Path addClip];
            CGContextDrawLinearGradient(context, StyleKitName.linearGradient,
                CGPointMake(-310.07, 100),
                CGPointMake(410, 0),
                kCGGradientDrawsBeforeStartLocation | kCGGradientDrawsAfterEndLocation);
            CGContextRestoreGState(context);
        }
    }
    
    CGContextRestoreGState(context);

}

+ (void)drawGradient3
{
    [StyleKitName drawGradient3WithFrame: CGRectMake(0, 0, 100, 100) resizing: StyleKitNameResizingBehaviorStretch];
}

+ (void)drawGradient3WithFrame: (CGRect)targetFrame resizing: (StyleKitNameResizingBehavior)resizing
{
    //// General Declarations
    CGContextRef context = UIGraphicsGetCurrentContext();
    
    //// Resize to Target Frame
    CGContextSaveGState(context);
    CGRect resizedFrame = StyleKitNameResizingBehaviorApply(resizing, CGRectMake(0, 0, 100, 100), targetFrame);
    CGContextTranslateCTM(context, resizedFrame.origin.x, resizedFrame.origin.y);
    CGContextScaleCTM(context, resizedFrame.size.width / 100, resizedFrame.size.height / 100);


    //// Page-1
    {
        //// Gradients
        {
            //// gradient-#05 Drawing
            UIBezierPath* gradient05Path = [UIBezierPath bezierPathWithRect: CGRectMake(0, 0, 100, 100)];
            CGContextSaveGState(context);
            [gradient05Path addClip];
            CGContextDrawLinearGradient(context, StyleKitName.linearGradient2,
                CGPointMake(100, 0),
                CGPointMake(0, 100),
                kCGGradientDrawsBeforeStartLocation | kCGGradientDrawsAfterEndLocation);
            CGContextRestoreGState(context);
        }
    }
    
    CGContextRestoreGState(context);

}

#pragma mark Generated Images

+ (UIImage*)imageOfGradient2
{
    if (_imageOfGradient2)
        return _imageOfGradient2;

    UIGraphicsBeginImageContextWithOptions(CGSizeMake(100, 100), NO, 0);
    [StyleKitName drawGradient2];

    _imageOfGradient2 = UIGraphicsGetImageFromCurrentImageContext();
    UIGraphicsEndImageContext();

    return _imageOfGradient2;
}

+ (UIImage*)imageOfGradient3
{
    if (_imageOfGradient3)
        return _imageOfGradient3;

    UIGraphicsBeginImageContextWithOptions(CGSizeMake(100, 100), NO, 0);
    [StyleKitName drawGradient3];

    _imageOfGradient3 = UIGraphicsGetImageFromCurrentImageContext();
    UIGraphicsEndImageContext();

    return _imageOfGradient3;
}

#pragma mark Customization Infrastructure

- (void)setGradient2Targets: (NSArray*)gradient2Targets
{
    _gradient2Targets = gradient2Targets;

    for (id target in gradient2Targets)
        [target performSelector: @selector(setImage:) withObject: StyleKitName.imageOfGradient2];
}

- (void)setGradient3Targets: (NSArray*)gradient3Targets
{
    _gradient3Targets = gradient3Targets;

    for (id target in gradient3Targets)
        [target performSelector: @selector(setImage:) withObject: StyleKitName.imageOfGradient3];
}


@end



CGRect StyleKitNameResizingBehaviorApply(StyleKitNameResizingBehavior behavior, CGRect rect, CGRect target)
{
    if (CGRectEqualToRect(rect, target) || CGRectEqualToRect(target, CGRectZero))
        return rect;

    CGSize scales = CGSizeZero;
    scales.width = ABS(target.size.width / rect.size.width);
    scales.height = ABS(target.size.height / rect.size.height);

    switch (behavior)
    {
        case StyleKitNameResizingBehaviorAspectFit:
        {
            scales.width = MIN(scales.width, scales.height);
            scales.height = scales.width;
            break;
        }
        case StyleKitNameResizingBehaviorAspectFill:
        {
            scales.width = MAX(scales.width, scales.height);
            scales.height = scales.width;
            break;
        }
        case StyleKitNameResizingBehaviorStretch:
            break;
        case StyleKitNameResizingBehaviorCenter:
        {
            scales.width = 1;
            scales.height = 1;
            break;
        }
    }

    CGRect result = CGRectStandardize(rect);
    result.size.width *= scales.width;
    result.size.height *= scales.height;
    result.origin.x = target.origin.x + (target.size.width - result.size.width) / 2;
    result.origin.y = target.origin.y + (target.size.height - result.size.height) / 2;
    return result;
}
