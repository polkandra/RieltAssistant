//
//  StyleKitName.m
//  Помощник риэлтора
//
//  Created by Mikhail Kozlyukov on 19.03.17.
//  Copyright © 2017 Chebahatt. All rights reserved.
//
//  Generated by PaintCode
//  http://www.paintcodeapp.com
//

#import "StyleKitName.h"


@implementation StyleKitName

#pragma mark Cache

static UIColor* _gradientColor = nil;
static UIColor* _gradientColor2 = nil;
static UIColor* _gradientColor5 = nil;
static UIColor* _gradientColor6 = nil;
static UIColor* _color = nil;
static UIColor* _textForeground = nil;

static CGGradientRef _backgroundColor = NULL;
static CGGradientRef _tabBar = NULL;

#pragma mark Initialization

+ (void)initialize
{
    // Colors Initialization
    _gradientColor = [UIColor colorWithRed: 0 green: 0.918 blue: 0.973 alpha: 1];
    _gradientColor2 = [UIColor colorWithRed: 0.427 green: 0.259 blue: 0.937 alpha: 1];
    _gradientColor5 = [UIColor colorWithRed: 0.78 green: 0.906 blue: 0.922 alpha: 0.299];
    _gradientColor6 = [UIColor colorWithRed: 0.624 green: 0.984 blue: 0.961 alpha: 0.5];
    _color = [UIColor colorWithRed: 0 green: 0 blue: 0 alpha: 1];
    _textForeground = [UIColor colorWithRed: 0.169 green: 0.827 blue: 0.859 alpha: 1];

    // Gradients Initialization
    CGFloat backgroundColorLocations[] = {0, 1};
    _backgroundColor = CGGradientCreateWithColors(NULL, (__bridge CFArrayRef)@[(id)StyleKitName.gradientColor.CGColor, (id)StyleKitName.gradientColor2.CGColor], backgroundColorLocations);
    CGFloat tabBarLocations[] = {0, 1};
    _tabBar = CGGradientCreateWithColors(NULL, (__bridge CFArrayRef)@[(id)StyleKitName.gradientColor5.CGColor, (id)StyleKitName.gradientColor6.CGColor], tabBarLocations);

}

#pragma mark Colors

+ (UIColor*)gradientColor { return _gradientColor; }
+ (UIColor*)gradientColor2 { return _gradientColor2; }
+ (UIColor*)gradientColor5 { return _gradientColor5; }
+ (UIColor*)gradientColor6 { return _gradientColor6; }
+ (UIColor*)color { return _color; }
+ (UIColor*)textForeground { return _textForeground; }

#pragma mark Gradients

+ (CGGradientRef)backgroundColor { return _backgroundColor; }
+ (CGGradientRef)tabBar { return _tabBar; }

#pragma mark Drawing Methods

+ (void)drawCanvas1
{
    [StyleKitName drawCanvas1WithFrame: CGRectMake(0, 0, 375, 667) resizing: StyleKitNameResizingBehaviorStretch];
}

+ (void)drawCanvas1WithFrame: (CGRect)targetFrame resizing: (StyleKitNameResizingBehavior)resizing
{
    //// General Declarations
    CGContextRef context = UIGraphicsGetCurrentContext();
    
    //// Resize to Target Frame
    CGContextSaveGState(context);
    CGRect resizedFrame = StyleKitNameResizingBehaviorApply(resizing, CGRectMake(0, 0, 375, 667), targetFrame);
    CGContextTranslateCTM(context, resizedFrame.origin.x, resizedFrame.origin.y);
    CGContextScaleCTM(context, resizedFrame.size.width / 375, resizedFrame.size.height / 667);


    //// Rectangle Drawing
    UIBezierPath* rectanglePath = [UIBezierPath bezierPathWithRect: CGRectMake(0, 20, 403, 647)];
    CGContextSaveGState(context);
    [rectanglePath addClip];
    CGContextDrawLinearGradient(context, StyleKitName.backgroundColor, CGPointMake(201.5, 20), CGPointMake(201.5, 667), kNilOptions);
    CGContextRestoreGState(context);
    
    CGContextRestoreGState(context);

}

+ (void)drawCanvas2
{
    [StyleKitName drawCanvas2WithFrame: CGRectMake(0, 0, 240, 120) resizing: StyleKitNameResizingBehaviorStretch];
}

+ (void)drawCanvas2WithFrame: (CGRect)targetFrame resizing: (StyleKitNameResizingBehavior)resizing
{
    //// General Declarations
    CGContextRef context = UIGraphicsGetCurrentContext();
    
    //// Resize to Target Frame
    CGContextSaveGState(context);
    CGRect resizedFrame = StyleKitNameResizingBehaviorApply(resizing, CGRectMake(0, 0, 240, 120), targetFrame);
    CGContextTranslateCTM(context, resizedFrame.origin.x, resizedFrame.origin.y);
    CGContextScaleCTM(context, resizedFrame.size.width / 240, resizedFrame.size.height / 120);
    
    CGContextRestoreGState(context);

}

@end



CGRect StyleKitNameResizingBehaviorApply(StyleKitNameResizingBehavior behavior, CGRect rect, CGRect target)
{
    if (CGRectEqualToRect(rect, target) || CGRectEqualToRect(target, CGRectZero))
        return rect;

    CGSize scales = CGSizeZero;
    scales.width = ABS(target.size.width / rect.size.width);
    scales.height = ABS(target.size.height / rect.size.height);

    switch (behavior)
    {
        case StyleKitNameResizingBehaviorAspectFit:
        {
            scales.width = MIN(scales.width, scales.height);
            scales.height = scales.width;
            break;
        }
        case StyleKitNameResizingBehaviorAspectFill:
        {
            scales.width = MAX(scales.width, scales.height);
            scales.height = scales.width;
            break;
        }
        case StyleKitNameResizingBehaviorStretch:
            break;
        case StyleKitNameResizingBehaviorCenter:
        {
            scales.width = 1;
            scales.height = 1;
            break;
        }
    }

    CGRect result = CGRectStandardize(rect);
    result.size.width *= scales.width;
    result.size.height *= scales.height;
    result.origin.x = target.origin.x + (target.size.width - result.size.width) / 2;
    result.origin.y = target.origin.y + (target.size.height - result.size.height) / 2;
    return result;
}
